Мета роботи
Метою даної роботи було покращення якості програмного коду за допомогою застосування різноманітних технік рефакторингу. Основна задача — підвищити читабельність, надійність та підтримуваність коду, а також полегшити його тестування і повторне використання.

Опис виконаної роботи
У ході роботи було виконано наступні завдання:

Проаналізовано оригінальний код та виявлено його слабкі місця: надмірне використання словників для зберігання даних, дублювання коду, відсутність обробки помилок та валідації, недостатньо зрозумілі імена змінних, а також відсутність структурованої організації.

Створено клас User, який інкапсулює інформацію про користувача (ім’я, прізвище, вік, email), що покращило структуру даних та зробило код більш зрозумілим.

Винесено логіку обробки даних у функцію process_user_data для спрощення коду та забезпечення його повторного використання.

Реалізовано валідацію вхідних даних та обробку виключень для запобігання аварійної роботи при некоректних вхідних даних.

Покращено іменування змінних та функцій для підвищення читабельності.

Застосовано форматовані рядки (f-string) для зручнішої роботи з текстовими даними.

Зменшено дублювання коду за допомогою list comprehension.

Проведено комплексне тестування з великою кількістю кейсів, що покривають різні сценарії використання, включаючи граничні та помилкові дані.

Документація по рефакторингу
Виділення класу (Extract Class) — замість словників створено клас User, який інкапсулює дані користувача.

Іменування змінних та функцій (Rename Variables/Methods) — змінні отримали зрозумілі імена (users, data, result).

Використання форматованих рядків (f-string) — покращено формування рядків з об’єктів класу.

Виділення функції (Extract Function) — логіка обробки винесена у функцію process_user_data.

Обробка помилок (Exception Handling) — додано try-except для безпечної роботи з вхідними даними.

Валідація вхідних даних — перевірка віку та фільтрація некоректних записів.

Видалення дублювання коду (Remove Duplication) — застосовано list comprehension для формування списків.

Розділення відповідальності (Single Responsibility Principle) — клас User відповідає за дані користувача, функція — за бізнес-логіку.

Організація коду у модулі — розділення коду на окремі файли для кращої підтримки.

Тестування з різноманітними кейсами — створено 20 тестів для перевірки роботи коду у різних ситуаціях.

Висновок
Рефакторинг коду дозволив усунути виявлені недоліки оригінальної реалізації: надмірне дублювання, відсутність структурованості та перевірок, а також проблеми з читабельністю. Завдяки застосуванню класів, чистої організації функцій, обробці виключень та валідації даних, код став більш стійким до помилок, простим для розуміння та подальшої підтримки. Комплексне тестування підтвердило коректність і надійність роботи оновленої програми.

